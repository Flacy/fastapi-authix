{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#introduction","title":"Introduction \ud83d\udcda","text":"<p>FastAPI-Authix is a lightweight authentication library for FastAPI, which handles token-based authentication, secure data storage, and authorization flows.</p>"},{"location":"#core-features","title":"Core Features \ud83d\udd11","text":"<ul> <li>Token Management: Secure token generation, validation and storage</li> <li>Data Serialization: Automatic serialization of Python objects (dicts, dataclasses, models) into tokens</li> <li>Modern Encryption: Built-in Fernet cipher for token security (more algorithms coming soon)</li> <li>FastAPI Integration: Native FastAPI dependency system support</li> </ul>"},{"location":"#installation","title":"Installation \ud83d\udee0\ufe0f","text":"pipuvpoetrypipenvfext <pre><code>pip install fastapi-authix\n</code></pre> <pre><code>uv add fastapi-authix\n</code></pre> <pre><code>poetry add fastapi-authix\n</code></pre> <pre><code>pipenv install fastapi-authix\n</code></pre> <pre><code>fext i fastapi-authix\n</code></pre>"},{"location":"basic-usage/","title":"Usage","text":""},{"location":"basic-usage/#getting-started","title":"Getting Started","text":""},{"location":"basic-usage/#vault","title":"Vault","text":"<p>Everything starts with <code>Vault</code>. It handles all interactions with other classes in the correct order. Setting it up is straightforward since all parameters have default values. It's ready for production use out of the box, though you'll likely want to customize it for your needs.</p> <pre><code>from fastapi_authix.vault import Vault\n\nvault = Vault()\n</code></pre> <p>Let's explore its configuration options:</p>"},{"location":"basic-usage/#cipher","title":"cipher","text":"<p>The security layer responsible for data encryption and access token generation. By default, it uses the Fernet encryption algorithm with a key that's generated on each application startup. You can choose from other available ciphers or implement your own.</p>"},{"location":"basic-usage/#serializer","title":"serializer","text":"<p>The serializer converts objects into JSON format, which is then encoded into access tokens and reconstructed during decryption. The library supports serialization of most common data models.</p> <p>Info</p> <p>By default, the serializer runs in <code>auto</code> mode, automatically detecting your data types. This requires a one-time detection process.</p> <p>Warning</p> <p>Using incorrect data types will raise an exception during serialization.</p>"},{"location":"basic-usage/#cookie_key-header_key","title":"cookie_key, header_key","text":"<p>The name of the cookie (or header) where the access token will be stored.</p>"},{"location":"basic-usage/#use_cookie-use_header","title":"use_cookie, use_header","text":"<p>Tells Vault whether to check for access tokens in cookies and/or headers. These settings work independently \u2014 enabling both means tokens will be checked in both places. Cookies take precedence when both are enabled.</p>"},{"location":"basic-usage/#building-an-application","title":"Building an Application","text":"<p>Let's create a simple application to demonstrate how to use Vault:</p> <pre><code>from starlette import status\nfrom fastapi import FastAPI, Depends\nfrom fastapi.responses import RedirectResponse, JSONResponse\nfrom fastapi_authix.vault import Vault\n\napp, vault = FastAPI(), Vault(serializer=\"dict\")\n\n\n@app.get(\"/login\")\nasync def login(name: str) -&gt; RedirectResponse:\n    response = RedirectResponse(\"/home\", status_code=status.HTTP_302_FOUND)\n    vault.set_access_token(response, payload={\"name\": name})\n    return response\n\n\n@app.get(\"/home\")\nasync def home_page(user_data: dict[str, str] = Depends(vault.require_data)) -&gt; JSONResponse:\n    return JSONResponse({\"hello\": user_data[\"name\"]})\n</code></pre> <p>Running this example:</p> <pre><code>$ curl -L -c cookies.txt -b cookies.txt http://localhost:8000/login?name=John\n{\"hello\":\"John\"}\n</code></pre> <p>In this example, we:</p> <ol> <li>Set a payload <code>{\"name\": \"John\"}</code></li> <li>Serialize it to JSON and encrypt it into an access token</li> <li>Redirect to <code>/home</code>, which requires the access token from cookies</li> <li>Decrypt and restore the data</li> </ol> <p>That's it! A simple but complete authentication flow.</p>"},{"location":"basic-usage/#token-deactivation","title":"Token Deactivation","text":"<p>Let's build on the previous example and add a new endpoint.</p> <pre><code>@app.get(\"/logout\")\nasync def logout(\n    access_token: str = Depends(vault.extract_access_token),\n    _: dict[str, str] = Depends(vault.require_data),\n) -&gt; JSONResponse:\n    response = JSONResponse({\"ok\": True})\n    vault.disable_access_token(access_token)\n    vault.remove_access_token(response)\n    return response\n</code></pre> <p>In this example, we:</p> <ol> <li>Extract the access token from cookies.</li> <li>Validate the token using the <code>require_data</code> dependency.    This is necessary because <code>extract_access_token</code> does not perform validation \u2014 it only retrieves the token from the request.</li> <li>Remove the access token from cookies.</li> <li>Return a response to the client.</li> </ol>"},{"location":"basic-usage/#token-lifetime","title":"Token Lifetime","text":"<p>Each token has a lifetime (by default, it's implicitly set to 1 hour). However, when deactivated, the token is added to a special store, where it remains until reused or the application restarts. This ensures that if someone tries to authenticate with a deactivated token, the system will reject it.</p>"},{"location":"basic-usage/#expired-tokens","title":"Expired Tokens","text":"<p>If a token is not deactivated, it will expire on its own and become unusable. In that case, you will receive an exception related to your cipher.</p> <p>Note</p> <p>The library doesn\u2019t catch cryptographic errors. Different encryption methods may throw different exceptions.</p>"},{"location":"ciphers/","title":"Ciphers","text":"<p>The library expects broad use of various encryption algorithms in the future. However, we couldn't leave the library without at least one encryption method. By default, Fernet is available \u2014 it's ideal for applications without complex cryptographic requirements. Under the hood, we use the cryptography library, with an external layer called Secure Layer. This is a protocol (interface) for interacting with cryptographic functions.</p>"},{"location":"ciphers/#fernet","title":"Fernet","text":"<p>Fernet is a symmetric encryption method based on AES in CBC mode with HMAC for data integrity. It's secure, simple, and supports time-limited tokens.</p> <pre><code>from cryptography.fernet import Fernet as Cipher\nfrom fastapi_authix.security.fernet import Fernet\n\nsecure_layer = Fernet(\n    secret_key=Cipher.generate_key(),\n    time_to_live=3600,  # 1 hour\n)\n</code></pre>"},{"location":"serializers/","title":"Serializers","text":"<p>A key feature of this library is its ability to serialize and restore data from objects. Each data model uses its own serializer to ensure safe data storage.</p> <p>Warning</p> <p>Using <code>pickle</code> or similar utilities can pose serious security risks.</p>"},{"location":"serializers/#built-in-serializers","title":"Built-in Serializers","text":""},{"location":"serializers/#dict","title":"dict","text":"<pre><code>from fastapi_authix.serializers import Serializer\n\n# Remains unchanged, as dict is perfectly suited for JSON conversion.\njson = Serializer({\"test\": \"data\"}, mode=\"dict\").serialize()\n# {\"test\": \"data\"}\n</code></pre>"},{"location":"serializers/#dataclass","title":"dataclass","text":"<pre><code>from dataclasses import dataclass\n\nfrom fastapi_authix.serializers import Serializer\n\n@dataclass(frozen=True)\nclass TestData:\n    name: str\n\njson = Serializer(TestData(name=\"John\"), mode=\"dataclass\").serialize()\n# {\"name\": \"John\"}\n</code></pre>"},{"location":"serializers/#pydantic","title":"pydantic","text":"<pre><code>from pydantic import BaseModel\nfrom fastapi_authix.serializers import Serializer\n\nclass TestModel(BaseModel):\n    name: str\n\njson = Serializer(TestModel(name=\"John\"), mode=\"pydantic\").serialize()\n# {\"name\": \"John\"}\n</code></pre>"},{"location":"serializers/#sqlalchemy","title":"sqlalchemy","text":"<pre><code>from sqlalchemy import Column, Integer, String\nfrom sqlalchemy.ext.declarative import declarative_base\nfrom fastapi_authix.serializers import Serializer\n\nclass TestModel(declarative_base()):\n    __tablename__ = \"test_model\"\n\n    id = Column(Integer, primary_key=True)\n    name = Column(String)\n\njson = Serializer(TestModel(id=1, name=\"John\"), mode=\"sqlalchemy\").serialize()\n# {\"id\": 1, \"name\": \"John\"}\n</code></pre>"}]}